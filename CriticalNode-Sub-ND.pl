#
# CriticalNode-Sub-ND.pl
#
#	From RAW to NextDevice ND file
#
#	Input: 	Collector name as $ARGV[0]
#			Files
#				COL-SMP.txt - generated by { select EQKTX, TPLNR from GIS.MD_EQ_GIS where TPLNR like 'N-SM-RC-%' }
#					Format:	RC-xxxx
#							SMP-xxxx
#
#	From RAW Fields:
#		F1	TX_DEVICE_ID
#		F2	TX_RC_SMP
#		F3	TX_HOPS
#		F4	TX_LQI
#		F5	TX_MIN_LQI
#		F6	TX_PARENT
#		F7	TX_RX_RSSI
#		F8	TX_TX_RSSI
#		F9	TX_REPORTING
#		F10	DT_ROW_STAT
#		F11	CD_ROW_STAT
#		F12	DT_INSERTED
#		F13	DT_GATE_DOWNLOAD
#		F14	EXT_ETLTIME
#		
#	To ND Fields:
#		F1	Collector	
#		F2	Node
#		F3	Next Node
#		F4	HOPS
#		F5	RX_RSSI
#		F6	TX_RSSI
#		F7	GATE_DOWNLOAD_Date		
#		
#
#	Action:
#			- Lookup the SMP number of collector RC-XXXX from input file COL-SMP.TXT
#			- Generate the calender (dates) from input file RC-xxxxx.dl by extracting & sorting field 'DT_GATE_LOAD' (date portion of F13) into outfile datelist.out
#			- Generate NextDevice file for each collector
#

#----------------------------------------------------------------
use List::MoreUtils qw(uniq);
my $col= $ARGV[0];
my $DIRout="C:\\Scripts\\1-out\\";
my $DIRin="C:\\Scripts\\1-in\\";
my $log=$DIRout."LOG.txt";
my $colsmpfile=$DIRin."col-smp.txt";
my $rawfile=$DIRout.$col.".raw";
my $nextdevice=$DIRout.$col.".nd";
my $colsum=$DIRout.$col.".sum";
my $t1=$DIRout."t1.out";
my $t2=$DIRout."t2.out";
my $t3=$DIRout."t3.out";
my $dd="";
my $tt="";
my $ff=0;
my $f1,$f2,$f3,$f4,$f5,$f6,$f7,$f8,$f9,$f10,$f11,$f12,$f13,$f14;
#
#
open (LOG, ">>$log");
#
# Lookup the SMP name for collector RC-xxxx
open(COLSMP,$colsmpfile)|| die "Failed to open file $colsmpfile";
my $colsmp="nomatch";
while (<COLSMP>)
{
	chomp;
	($f1,$f2) = split /,/, $_;
	if ($f2 =~ $col) {
		$colsmp = $f1;
		$colsmp =~ s/\s+//;
		$colsmp =~ s/'//g;
		last;
	}
}
close COLSMP;
print LOG "CriticalNode-Sub-ND.pl: Collector $col SMP= $colsmp in file col-smp.txt\n";
if ( $colsmp =~ "nomatch")
{
	print LOG "CriticalNode-Sub-ND.pl: Cannot locate $col SMP name from col-smp.txt\n";
	print "Cannot locate $col SMP name from col-smp.txt\n";
	exit 0;
}
#
# Generate NextDevice list from RAW file
#
close LOG;
open (NEXTDEVtmp,">$t1") || die "Failed to open file $t1";
open (DATE,">$t2")|| die "Failed to open file $t2";
open (RAW, $rawfile)|| die "Failed to open file $rawfile";
while(<RAW>)
{
	chomp;
	$line = $_;
	my $first_c = substr $line,0,1;
	if (($first_c == 'S') || ($first_c == 'J'))
	{
		$line =~ s/'//g;
		($f1,$f2,$f3,$f4,$f5,$f6,$f7,$f8,$f9,$f10,$f11,$f12,$f13,$f14) = split /,/, $line;
		($dd,$tt) = split / /, $f10;
		## replace 
		if ($f6 =~ $f1) { $f6 = $f2}
		print NEXTDEVtmp "$f2\t$f1\t$f6\t$f3\t$f7\t$f8\t$dd\n";
		print DATE "$col\t$colsmp\t$col\t$ff\t$ff\t$ff\t$dd\n";
	}	
}
close RAW;
close NEXTDEVtmp;
close DATE;
$cmd="C:\\GnuWin32\\bin\\sort.exe -u $t2 > $t3"; 
system($cmd);
$cmd="C:\\GnuWin32\\bin\\cat.exe $t3 >> $t1"; 
system($cmd);
$cmd="C:\\GnuWin32\\bin\\sort.exe -u -k7,7 -k3,3 -k2,2 $t1 > $nextdevice"; 
system($cmd);
#	
open (SUM, ">$colsum")|| die "Failed to open file $colsum";
close SUM;
#
open (DATE, $t3)|| die "Failed to open file $t3";
while(<DATE>)
{
	chmop;
	($f1,$f2,$f3,$f4,$f5,$f6,$gdate) = split /\t/, $_;
	$cmd="perl C:\\Scripts\\1-perl\\CriticalNode-Sub-SUM.pl $col $gdate $colsmp";
	#open (LOG, ">>$log");
	#print LOG "CriticalNode-Sub-ND.pl:	$cmd\n";
	#close LOG;
	system($cmd);
}
close DATE;
exit 0;
#
#
#
#